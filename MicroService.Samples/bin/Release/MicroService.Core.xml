<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicroService.Core</name>
    </assembly>
    <members>
        <member name="T:MicroService.Core.HealthModule">
            <summary>
            默认提供的服务健康模块
            </summary>
        </member>
        <member name="M:MicroService.Core.HealthModule.#ctor(MicroService.Core.ServiceStatus)">
            <summary>
            构造方法
            </summary>
            <param name="serviceStatus"></param>
        </member>
        <member name="T:MicroService.Core.MicroServiceBase">
            <summary>
            微服务类
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.banner">
            <summary>
            启动画面文字
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.serviceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.serviceDisplayName">
            <summary>
            服务显示名称（windows service）
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.runningUrls">
            <summary>
            服务绑定的 URL
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.serviceStatus">
            <summary>
            服务状态
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.enableBanner">
            <summary>
            启动画面开关
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.enableCors">
            <summary>
            API 访问跨域开关
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.updateServiceStatusRate">
            <summary>
            服务状态更新频率，默认10秒
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.ServiceName">
            <summary>
            获取或者设置一个值，该值表示服务名称
            <para>仅在调用 Run 方法前可设置</para>
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.ServiceDisplayName">
            <summary>
            获取或者设置一个值，该值表示服务显示名称
            <para>仅在调用 Run 方法前可设置</para>
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.RunningUrls">
            <summary>
            获取或者设置一个值，该值表示当前微服务运行对外开放的URL
            <para>格式如：http://localhost:9000;http://+:9001</para>
            <para>意思为：内网可访问9000端口，外网可访问9001端口。</para>
            <para>仅在调用 Run 方法前可设置</para>
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.Banner">
            <summary>
            获取或者设置一个值，该值表示程序启动画面
            <para>仅在调用 Run 方法前可设置</para>
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.EnableBanner">
            <summary>
            获取或者设置一个值，该值表示是否启用程序启动画面，默认 true
            <para>仅在调用 Run 方法前可设置</para>
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.EnableCors">
            <summary>
            获取或者设置一个值，该值表示是否允许跨域请求，默认 true
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.IsServiceRunning">
            <summary>
            获取一个值，该值表示服务是否正在运行
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.UpdateServiceStatusRate">
            <summary>
            获取或者设置一个值，该值表示服务状态的刷新时间，默认10秒，最小值5秒，最大1天
            <para>仅在调用 Run 方法前可设置</para>
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.ExeFile">
            <summary>
            获取一个值，该值表示当前运行的 Exe 文件名
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.RootPath">
            <summary>
            获取一个值，该值表示当前服务运行的目录
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.ServiceStatus">
            <summary>
            获取一个值，该值表示服务当前的运行状态
            <para>每个微服务中都有一个 ServiceStatus 类，可以通过 /health 路径访问服务状态</para>
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.ServiceRunningMode">
            <summary>
            服务运行模式
            </summary>
        </member>
        <member name="P:MicroService.Core.MicroServiceBase.StartOptions">
            <summary>
            内部 OWIN 启动时使用的启动参数
            </summary>
        </member>
        <member name="E:MicroService.Core.MicroServiceBase.OnServiceStarting">
            <summary>
            服务正在启动时执行的事件，可在这个时候对服务做一些扩展
            </summary>
        </member>
        <member name="E:MicroService.Core.MicroServiceBase.OnServiceStarted">
            <summary>
            服务启动成功后执行的事件
            </summary>
        </member>
        <member name="E:MicroService.Core.MicroServiceBase.OnServiceStoping">
            <summary>
            服务停止之前执行的事件
            </summary>
        </member>
        <member name="E:MicroService.Core.MicroServiceBase.OnServiceStoped">
            <summary>
            服务停止之后执行的事件
            </summary>
        </member>
        <member name="E:MicroService.Core.MicroServiceBase.OnServiceStatusUpdating">
            <summary>
            服务状态更新时执行的事件
            </summary>
        </member>
        <member name="E:MicroService.Core.MicroServiceBase.OnRequestStart">
            <summary>
            当请求到达Nancy模块时执行的事件
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.serviceRunning">
            <summary>
            一个标记
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.serverDisposable">
            <summary>
            OWIN
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.bootstrap">
            <summary>
            Nancy bootstrapper override
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.registedModules">
            <summary>
            已注册模块
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.serviceManager">
            <summary>
            Window 服务管理器
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.configActionList">
            <summary>
            扩展的可用于构造 OWIN IAppBuilder 的方法列表
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.container">
            <summary>
            Nancy ioc container
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.cancellationTokenSource">
            <summary>
            停止服务器时使用的 TokenSource
            </summary>
        </member>
        <member name="F:MicroService.Core.MicroServiceBase.cancellationToken">
            <summary>
            Token
            </summary>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.#ctor(System.String)">
            <summary>
            构造方法
            <para>默认使用 app.config/appSettings/server.urls 配置或 http://127.0.0.1:8080 作为 API 入口</para>
            </summary>
            <param name="serviceName"></param>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="urls">设置绑定 URL</param>
            <param name="serviceName">设置服务名称</param>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="urls">包含多个IP时分号分割，如：http://localhost:8080;http://localhost:8081</param>
            <param name="serviceName"></param>
            <param name="serviceDisplayName"></param>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.ServiceStartingDefaultAction(MicroService.Core.MicroServiceBase,Nancy.TinyIoc.TinyIoCContainer)">
            <summary>
            服务启动之前执行的事件
            </summary>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.ServiceStartedDefaultAction(MicroService.Core.MicroServiceBase)">
            <summary>
            服务启动后执行的事件
            </summary>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.ServiceStopingDefaultAction(MicroService.Core.MicroServiceBase)">
            <summary>
            服务停止后执行的事件
            </summary>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.ServiceStopedDefaultAction(MicroService.Core.MicroServiceBase)">
            <summary>
            服务停止后执行的事件
            </summary>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.ServiceStatusUpdateDefaultAction(MicroService.Core.MicroServiceBase,MicroService.Core.ServiceStatus)">
            <summary>
            更新服务状态时执行的事件，可以通过此事件，向 /health 接口汇报服务状态
            </summary>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.ConfigureOwin(Owin.IAppBuilder)">
            <summary>
            在子类重写时，在调用 OWIN 初始化方法时会调用此方法，用于向 OWIN 增加新功能
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.RequestStartDefaultAction(MicroService.Core.MicroServiceBase,Nancy.Bootstrapper.IPipelines,Nancy.NancyContext)">
            <summary>
            在子类中重写时，可处理 Nancy Pipelines 完成扩展功能
            </summary>
            <param name="service"></param>
            <param name="pipelines"></param>
            <param name="nancyContext"></param>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.OutputRegistedModules">
            <summary>
            输出当前需要注册的模块
            </summary>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.StartUpdateServiceStatusThread">
            <summary>
            启动服务状态更新，触发 OnUpdateServiceStatus 事件
            </summary>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.GetConfig(System.String)">
            <summary>
            从 App.config/AppSettings 配置中获取配置
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.GetComponent``1">
            <summary>
            从 IoC 容器中获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.Run(System.String[])">
            <summary>
            启动
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.WriteToLog(System.String,System.Exception)">
            <summary>
            写出到日志，并输出到控制台
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.Stop(System.String)">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.InternalRun">
            <summary>
            核心运行方法
            </summary>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.Dispose(System.Boolean)">
            <summary>
            释放系统资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:MicroService.Core.MicroServiceBase.Dispose">
            <summary>
            释放系统资源
            </summary>
        </member>
        <member name="T:MicroService.Core.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:MicroService.Core.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:MicroService.Core.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:MicroService.Core.Properties.Resources.DefaultBanner">
            <summary>
              查找类似      __  ___     __  __                                
               /  |/  /____/ / / /_  ______   _________  ____ ___ 
              / /|_/ / ___/ /_/ / / / / __ \ / ___/ __ \/ __ `__ \
             / /  / / /  / __  / /_/ / /_/ // /__/ /_/ / / / / / /
            /_/  /_/_/  /_/ /_/\__,_/\____(_)___/\____/_/ /_/ /_/ 的本地化字符串。
            </summary>
        </member>
        <member name="T:MicroService.Core.RestResult">
            <summary>
            Api 通用返回值
            </summary>
        </member>
        <member name="M:MicroService.Core.RestResult.#ctor">
            <summary>
            默认构造方法
            </summary>
        </member>
        <member name="M:MicroService.Core.RestResult.#ctor(System.Boolean,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="ret"></param>
            <param name="msg"></param>
        </member>
        <member name="M:MicroService.Core.RestResult.#ctor(System.Boolean,System.String,System.Object)">
            <summary>
            构造方法
            </summary>
            <param name="ret"></param>
            <param name="msg"></param>
            <param name="data"></param>
        </member>
        <member name="P:MicroService.Core.RestResult.ret">
            <summary>
            成功标识
            </summary>
        </member>
        <member name="P:MicroService.Core.RestResult.msg">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:MicroService.Core.RestResult.data">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="T:MicroService.Core.RestResultExtensions">
            <summary>
            Api 返回值扩展方法
            </summary>
        </member>
        <member name="M:MicroService.Core.RestResultExtensions.ToErrorResult(System.String)">
            <summary>
            使用一个消息字符串初始化 RestResult
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:MicroService.Core.RestResultExtensions.ToOkResult(System.String)">
            <summary>
            使用一个消息字符串初始化 RestResult
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:MicroService.Core.RestResultExtensions.ToOkResult(System.Object,System.String)">
            <summary>
            使用一个消息字符串初和附加数据始化 RestResult
            </summary>
            <param name="data"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:MicroService.Core.RunningMode">
            <summary>
            服务运行模式
            </summary>
        </member>
        <member name="F:MicroService.Core.RunningMode.Console">
            <summary>
            控制台模式
            </summary>
        </member>
        <member name="F:MicroService.Core.RunningMode.WindowsService">
            <summary>
            Windows 服务模式
            </summary>
        </member>
        <member name="T:MicroService.Core.CustomBootstrapper">
            <summary>
            Nancy 默认启动器
            </summary>
        </member>
        <member name="M:MicroService.Core.CustomBootstrapper.RequestStartup(Nancy.TinyIoc.TinyIoCContainer,Nancy.Bootstrapper.IPipelines,Nancy.NancyContext)">
            <summary>
            请求开始时，设置跨域请求
            </summary>
            <param name="container"></param>
            <param name="pipelines"></param>
            <param name="context"></param>
        </member>
        <member name="M:MicroService.Core.CustomBootstrapper.ApplicationStartup(Nancy.TinyIoc.TinyIoCContainer,Nancy.Bootstrapper.IPipelines)">
            <summary>
            Nancy 框架启动执行
            </summary>
            <param name="container"></param>
            <param name="pipelines"></param>
        </member>
        <member name="T:MicroService.Core.ServiceInternal.InternalService">
            <summary>
            内部服务，用来注册 windows service
            </summary>
        </member>
        <member name="M:MicroService.Core.ServiceInternal.InternalService.#ctor(MicroService.Core.MicroServiceBase)">
            <summary>
            Windows 服务构造方法
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:MicroService.Core.ServiceInternal.InternalService.OnStart(System.String[])">
            <summary>
            服务启动时执行
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MicroService.Core.ServiceInternal.InternalService.OnStop">
            <summary>
            服务停止时执行
            </summary>
        </member>
        <member name="T:MicroService.Core.ServiceInternal.WindowsServiceManager">
            <summary>
            Windows 服务管理器
            </summary>
        </member>
        <member name="M:MicroService.Core.ServiceInternal.WindowsServiceManager.#ctor(MicroService.Core.MicroServiceBase)">
            <summary>
            默认构造方法
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:MicroService.Core.ServiceInternal.WindowsServiceManager.Install">
            <summary>
            安装服务
            </summary>
        </member>
        <member name="M:MicroService.Core.ServiceInternal.WindowsServiceManager.UnInstall">
            <summary>
            卸载服务
            </summary>
        </member>
        <member name="M:MicroService.Core.ServiceInternal.WindowsServiceManager.Start">
            <summary>
            运行服务
            </summary>
        </member>
        <member name="M:MicroService.Core.ServiceInternal.WindowsServiceManager.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:MicroService.Core.ServiceInternal.WindowsServiceManager.GetInstaller">
            <summary>
            构造安装程序
            </summary>
            <returns></returns>
        </member>
        <member name="M:MicroService.Core.ServiceInternal.WindowsServiceManager.IsInstalled">
            <summary>
            判断服务是否安装
            </summary>
            <returns></returns>
        </member>
        <member name="T:MicroService.Core.ServiceStatus">
            <summary>
            服务状态类，用于向外界汇报服务情况
            </summary>
        </member>
        <member name="F:MicroService.Core.ServiceStatus.KEY_START_TIME">
            <summary>
            服务状态 StartTime KEY
            </summary>
        </member>
        <member name="F:MicroService.Core.ServiceStatus.KEY_SERVICE_URLS">
            <summary>
            服务状态 ServiceUrls KEY
            </summary>
        </member>
        <member name="F:MicroService.Core.ServiceStatus.KEY_SERVICE_NAME">
            <summary>
            服务状态 ServiceName KEY
            </summary>
        </member>
        <member name="F:MicroService.Core.ServiceStatus.KEY_RUN_TIME">
            <summary>
            服务状态 RunTime KEY
            </summary>
        </member>
        <member name="M:MicroService.Core.ServiceStatus.#ctor(System.String,System.String)">
            <summary>
            默认构造函数，仅允许初始化一次
            </summary>
        </member>
        <member name="M:MicroService.Core.ServiceStatus.AddOrUpdate(System.String,System.Object)">
            <summary>
            增加或者更新服务状态中的字段
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MicroService.Core.ServiceStatus.GetValue``1(System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MicroService.Core.ServiceStatus.GetStatus">
            <summary>
            获取当前服务状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:MicroService.Core.UpdateRate">
            <summary>
            更新频率常量类
            </summary>
        </member>
        <member name="F:MicroService.Core.UpdateRate.SECOND">
            <summary>
            表示1秒
            </summary>
        </member>
        <member name="F:MicroService.Core.UpdateRate.MINUTE">
            <summary>
            表示1分钟
            </summary>
        </member>
        <member name="F:MicroService.Core.UpdateRate.HOUR">
            <summary>
            表示1小时
            </summary>
        </member>
        <member name="F:MicroService.Core.UpdateRate.HALF_HOUR">
            <summary>
            表示半小时
            </summary>
        </member>
        <member name="F:MicroService.Core.UpdateRate.DAY">
            <summary>
            表示1天
            </summary>
        </member>
    </members>
</doc>
